/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.baeldung.openapi.api;

import com.baeldung.openapi.model.BookDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-01-16T14:51:59.454589200+01:00[Europe/Budapest]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "books-controller", description = "the books-controller API")
public interface BooksApi {

    default BooksApiDelegate getDelegate() {
        return new BooksApiDelegate() {};
    }

    /**
     * GET /books : Return list of books.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "booksGet",
        summary = "Return list of books.",
        tags = { "books-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BookDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<BookDto>> booksGet(
        
    ) {
        return getDelegate().booksGet();
    }


    /**
     * GET /books/{id} : Returna a book with specific id.
     *
     * @param id The id of the book. (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "booksIdGet",
        summary = "Returna a book with specific id.",
        tags = { "books-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BookDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/books/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BookDto> booksIdGet(
        @Parameter(name = "id", description = "The id of the book.", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().booksIdGet(id);
    }


    /**
     * POST /books : Add a book.
     *
     * @param bookDto  (required)
     * @return OK (status code 200)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "booksPost",
        summary = "Add a book.",
        tags = { "books-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Long.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/books",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Long> booksPost(
        @Parameter(name = "BookDto", description = "", required = true) @Valid @RequestBody BookDto bookDto
    ) {
        return getDelegate().booksPost(bookDto);
    }

}
